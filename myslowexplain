#!/usr/bin/env python

import os
import sys
import re
from optparse import OptionParser

cnt = {}
cnt['Total'] = 0

try:
    import MySQLdb  # MySQL-python
except ImportError:
    try:
        import pymysql as MySQLdb  # PyMySQL
    except ImportError:
        print "Please install MySQLdb or PyMySQL"
        sys.exit(1)

def build_option_parser():
  parser = OptionParser(add_help_option=False, usage="usage: %prog [options] database")
  parser.add_option('-s', '--start',    help="Start Time (ex: '2012-07-28 03:00:00'")
  parser.add_option('-l', '--last',     help="Last Time [MINUTE]")
  parser.add_option('-t', '--type',     help="(default: ALL,index)", default='ALL,index')
  parser.add_option('-h', '--host',     help="(default: 127.0.0.1)", default='127.0.0.1')
  parser.add_option('-P', '--port',     help="(default: 3306)",      default=3306)
  parser.add_option('-u', '--user',     help="(default: root)",      default='root')
  parser.add_option('-p', '--password')
  parser.add_option('-S', '--socket')
  parser.add_option('-?', '--help', action="store_true", help="show this message")
  return parser

def printexplain(sql, exp):
  print "==================================================="
  print sql
  print "---------------------------------------------------"
  print "%14s: %s" % ("id",            exp['id'])
  print "%14s: %s" % ("select_type",   exp['select_type'])
  print "%14s: %s" % ("type",          exp['type'])
  print "%14s: %s" % ("Extra",         exp['Extra'])
  print "%14s: %s" % ("table",         exp['table'])
  print "%14s: %s" % ("possible_keys", exp['possible_keys'])
  print "%14s: %s" % ("key",           exp['key'])
  print "%14s: %s" % ("key_len",       exp['key_len'])
  print "%14s: %s" % ("rows",          exp['rows'])
  print "%14s: %s" % ("ref",           exp['ref'])

def fetchexplain(res, cur, type):
  global cnt
  row = res.fetch_row(1, 0)
  if not row:
    return False
  sql = "explain %s" % row[0][0]
  cur.execute(sql)
  for exp in cur.fetchall():
    for t in type:
      if exp['type'] == t or t == '%':
        cnt[t] += 1
        printexplain(row[0][0], exp)
        break
  return True

def main():
  global cnt
  parser = build_option_parser()
  opts, args = parser.parse_args()

  if opts.help:
    parser.print_help()
    return

  if len(args) == 0:
    parser.print_help()
    return

  cnf = {}
  cnf['host'] = opts.host
  cnf['user'] = opts.user
  if opts.password:
    cnf['password'] = opts.password
  if opts.socket:
    cnf['host'] = 'localhost'
    cnf['unix_socket'] = opts.socket
  else:
    cnf['port'] = opts.port
  if opts.type:
    type = opts.type.split(",")
    for t in type:
      cnt[t] = 0

  span = ''
  if opts.last:
    span = "and start_time>(NOW() - INTERVAL %s MINUTE)" % opts.last
  if opts.start:
    span = "and start_time>'%s'" % opts.start

  sql_slow = {}
  sql_slow[0] = "SELECT DISTINCT(sql_text) FROM mysql.slow_log WHERE db='%s' and sql_text like 'SELECT %% WHERE %%' %s" % (args[0], span)
  sql_slow[1] = "SELECT DISTINCT(sql_text) FROM mysql.slow_log WHERE db='%s' and sql_text like 'UPDATE %% WHERE %%' %s" % (args[0], span)

  con = {}
  con[0] = MySQLdb.connect(**cnf)
  cnf['db'] = args[0]
  con[1] = MySQLdb.connect(**cnf)
  cur = con[1].cursor(MySQLdb.cursors.DictCursor)

  sql = sql_slow[0]
  print "==================================================="
  print "START: %s" % sql
  con[0].query(sql)
  res = con[0].use_result()
  while(fetchexplain(res, cur, type)):
    cnt['Total'] += 1
  print "==================================================="
  for t in type:
    print "%5s: %d/%d rows" % (t, cnt[t], cnt['Total'])

if __name__ == '__main__':
    main()

