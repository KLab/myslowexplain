#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os
import sys
import re
import signal
from optparse import OptionParser
from collections import defaultdict

signal.signal(signal.SIGINT,  signal.SIG_DFL)
signal.signal(signal.SIGTERM, signal.SIG_DFL)
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
 
cnt = defaultdict(int)
cnt['Total'] = 0  # explainをかけたSELECT文の数
cnt['Rows']  = 0  # slow_logから抽出したレコードの数

try:
  import MySQLdb  # MySQL-python
except ImportError:
  try:
    import pymysql as MySQLdb  # PyMySQL
  except ImportError:
    print "Please install MySQLdb or PyMySQL"
    sys.exit(1)

def build_option_parser():
  p = OptionParser(add_help_option=False, usage="usage: %prog [options] database")
  p.add_option('-m',         type='string', dest='qmode',  default='select',                    help="select|update|delete (default: select)")
  p.add_option('-s',         type='string', dest='time',                                        help="Start Time(ex: '2012-07-28 03:00:00')")
  p.add_option('-l',         type='string', dest='last',   default='10',                        help="Last Time [MINUTE] (default: 10)")
  p.add_option('-L',         type='int',    dest='limit',  default=1000,                        help="Limit (default: 1000) 0 is unlimited")
  p.add_option('-t',         type='string', dest='type',                                        help="Type  (ex: ALL,index default: none)")
  p.add_option('-e',         type='string', dest='extra',                                       help="Extra (ex: 'filesort,temporary' default: None)")
  p.add_option('-h',         type='string', dest='host',   default='127.0.0.1',                 help="(default: 127.0.0.1)")
  p.add_option('-P',         type='int',    dest='port',   default=3306,                        help="(default: 3306)")
  p.add_option('-u',         type='string', dest='user',   default='root',                      help="(default: root)")
  p.add_option('-p',         type='string', dest='passwd',                                      help='password')
  p.add_option('-S',         type='string', dest='socket',                                      help='unix domain socket')
  p.add_option('--all',                     dest='all',    default=False, action='store_true',  help='show all querys')
  p.add_option('--no-where',                dest='where',  default=True,  action='store_false', help='Do not use a WHERE')
  p.add_option('--help',                    dest='help',                  action="store_true",  help='show this message')
  return p

#
# slow_logの内容を出力する
#
def printsql(row):
  print "==================================================="
  print "   last: %s" % row['stm']            # 最新の発行日時
  print "  qtime: %s" % row['qtm']            # 最大のクエリ実行時間
  print "  count: %s" % row['cnt']            # クエリの数
  print "  query: %s" % row['sql_text']       # 問題のSQL文
  if 'select' in row:
    print "explain: %s" % row['select']       # UPDATE/DELETEの場合はSELECTに変換したSQLを作る

#
# explainの結果を出力する
#
def printexplain(exp):
  print "---------------------------------------------------"
  print "%14s: %s" % ("id",            exp['id'])
  print "%14s: %s" % ("select_type",   exp['select_type'])
  print "%14s: %s" % ("type",          exp['type'])
  print "%14s: %s" % ("Extra",         exp['Extra'])
  print "%14s: %s" % ("table",         exp['table'])
  print "%14s: %s" % ("possible_keys", exp['possible_keys'])
  print "%14s: %s" % ("key",           exp['key'])
  print "%14s: %s" % ("key_len",       exp['key_len'])
  print "%14s: %s" % ("rows",          exp['rows'])
  print "%14s: %s" % ("ref",           exp['ref'])

#
# UPDATE/DELETEのテーブル名とWHERE節を抜き出してSELECT文にする
#
def conv_selectsql(sql):
  if re.search(r'^SELECT ', sql, re.IGNORECASE):
    return sql

  r = re.search(r'^UPDATE (\S+) SET .+ WHERE (.+)$', sql, re.IGNORECASE)
  if r:
    sql = "SELECT * FROM %s WHERE %s" % r.groups()
    return sql

  r = re.search(r'^DELETE FROM (\S+) WHERE (.+)$', sql, re.IGNORECASE)
  if r:
    sql = "SELECT * FROM %s WHERE %s" % r.groups()
    return sql

  return None

def view_explain(row, res):
  printsql(row)
  for exp in res: 
    printexplain(exp)

#
# explainを実行する
#   
def do_explain(cur, select_sql, typ, ext, row):
  global cnt
  v = False
  explain_sql = "explain " + select_sql
  cur.execute(explain_sql)
  res = cur.fetchall()

  # サブクエリを使っている場合は複数の結果が返ってくる
  for exp in res:
    cnt[exp['type']] += 1
    cnt['Total'] += 1
    if exp['possible_keys'] is None:
      v = True
    else:
      for t in typ:
        if exp['type'] == t or t == '%':
          v = True
          break
      for e in ext:
        if exp['Extra'].find("Using %s" % e) != -1:
          v = True
          break
    if v:
      view_explain(row, res)
      break

#
# sloe_logをフェッチしてexplainに渡す
#
def fetchexplain(res, cur, typ, ext):
  # 省メモリのため1行づつフェッチ
  rows = res.fetch_row(1, 1)
  if not rows:
    return False

  # 実際には1行しか返らないんだけども、
  # タプルで返ってくるので全件処理するように書いておく
  for row in rows:
    select_sql = conv_selectsql(row['sql_text'])
    if select_sql is None:
      printsql(row)
    else:
      if select_sql != row['sql_text']:
        row['select'] = select_sql
      do_explain(cur, select_sql, typ, ext, row)
  return True

#
# slow_log を抽出するSQL文を生成
#
def mkslowsql(db, opts):
  if opts.time:
    span = "and start_time>'%s'" % opts.time
  else:
    span = "and start_time>(NOW() - INTERVAL %s MINUTE)" % opts.last

  sql = "SELECT sql_text, max(query_time) as qtm, max(start_time) as stm, count(*) as cnt FROM mysql.slow_log "
  if opts.where:
    sql += "WHERE db='%s' and sql_text like '%s %% WHERE %%' %s GROUP BY sql_text ORDER BY cnt DESC"
  else:
    sql += "WHERE db='%s' and sql_text like '%s %%' %s GROUP BY sql_text ORDER BY cnt DESC"

  if opts.qmode == 'select':
    qmode = "SELECT"
  elif opts.qmode == 'update':
    qmode = "UPDATE"
  elif opts.qmode == 'delete':
    qmode = "DELETE"
  else:
    return None

  if opts.limit > 0:
    sql += " LIMIT %d" % opts.limit
  return sql % (db, qmode, span)

#
# コマンドラインオプションの整理
#
def getconfig(opts):
  cnf = {}
  cnf['host'] = opts.host
  cnf['user'] = opts.user
  if opts.passwd:
    cnf['passwd'] = opts.passwd
  if opts.socket:
    cnf['host'] = 'localhost'
    cnf['unix_socket'] = opts.socket
  else:
    cnf['port'] = opts.port

  if opts.all:
    typ = ['%']
  elif opts.type:
    typ = opts.type.split(",")
  else:
    typ = []

  if opts.extra:
    ext = opts.extra.split(",")
  else:
    ext = []

  return(cnf, typ, ext)

#
# 本体
#
def do_myslowexplain(db, sql, cnf, typ, ext):
  global cnt
  con = {}
  con[0] = MySQLdb.connect(**cnf)
  cnf['db'] = db
  con[1] = MySQLdb.connect(**cnf)
  cur = con[1].cursor(MySQLdb.cursors.DictCursor)
  print "==================================================="
  print sql
  con[0].query(sql)
  res = con[0].use_result()
  while(fetchexplain(res, cur, typ, ext)):
    cnt['Rows'] += 1
  print "==================================================="
  for t in cnt:
    if t != 'Total' and t != 'Rows' and cnt[t] > 0:
      print "%5s: %6d query" % (t, cnt[t])
  print "Total: %6d query (%d rows)" % (cnt['Total'], cnt['Rows'])

#=========================================================
#
# メイン
#
#=========================================================
def main():
  parser = build_option_parser()
  opts, args = parser.parse_args()

  if opts.help:
    parser.print_help()
    return

  if len(args) == 0:
    parser.print_help()
    return

  db  = args[0]
  sql = mkslowsql(db, opts)
  if sql is None:
    parser.print_help()
    return

  cnf, typ, exp = getconfig(opts)
  do_myslowexplain(db, sql, cnf, typ, exp)

if __name__ == '__main__':
    main()

